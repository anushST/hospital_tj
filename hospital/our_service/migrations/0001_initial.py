# Generated by Django 4.2.11 on 2024-03-25 04:33

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('text', models.TextField(help_text='Comment text')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Hospital',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('description', models.TextField(max_length=512)),
                ('average_rank', models.FloatField(editable=False)),
                ('work_time', models.TextField(max_length=256)),
                ('small_image', models.ImageField(upload_to='hospital_images')),
                ('big_image', models.ImageField(upload_to='hospital_images')),
                ('comments', models.ManyToManyField(related_name='comments_from_hospital', to='our_service.comment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Rank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('value', models.IntegerField(validators=[django.core.validators.MinValueValidator(0, 'Rate can not be less than 0.'), django.core.validators.MaxValueValidator(10, 'Rate can not be more than 10')])),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('description', models.TextField(max_length=512)),
                ('average_rank', models.FloatField(editable=False)),
                ('price', models.FloatField(default=0, help_text='If price is not constant put 0.', validators=[django.core.validators.MinValueValidator(0, 'Нарх ай нол майда намешава.'), django.core.validators.MaxValueValidator(100000, 'Ай 100000 зиёд? Навса бкап охи.')])),
                ('min_price', models.FloatField(default=0, help_text='If price is constant put 0.', validators=[django.core.validators.MinValueValidator(0, 'Нарх ай нол майда намешава.'), django.core.validators.MaxValueValidator(100000, 'Ай 100000 зиёд? Навса бкап охи.')])),
                ('max_price', models.FloatField(default=0, help_text='If price is constant put 0.', validators=[django.core.validators.MinValueValidator(0, 'Нарх ай нол майда намешава.'), django.core.validators.MaxValueValidator(100000, 'Ай 100000 зиёд? Навса бкап охи.')])),
                ('comments', models.ManyToManyField(related_name='comments_from_service', to='our_service.comment')),
                ('hospital', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hospital', to='our_service.hospital')),
                ('ranks', models.ManyToManyField(related_name='ranks_from_service', to='our_service.rank')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='hospital',
            name='ranks',
            field=models.ManyToManyField(related_name='ranks_from_hospital', to='our_service.rank'),
        ),
    ]
